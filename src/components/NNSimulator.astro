---
---
---
<section style="padding:2rem;max-width:1000px;margin:0 auto;">
	<h2 style="margin:0 0 0.5rem 0;">Simulador de red neuronal (demo)</h2>
	<p style="margin:0 0 1rem 0;">Entrena una red 3→6→1 con datos sintéticos o <strong>carga un modelo entrenado</strong> desde Python (JSON con W1,b1,W2,b2). Puedes cambiar la <strong>importancia</strong> de cada indicador al crear los datos de entrenamiento.</p>
	<div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:1rem;align-items:start;">
		<div class="card" style="background:#fff;border:1px solid #e0e0e0;border-radius:12px;padding:1rem;">
			<h4 style="margin:0 0 0.5rem 0;">Entrada actual</h4>
			<label>Humedad (%)
				<input id="x_h" type="range" min="0" max="100" value="35" style="width:100%"/>
			</label>
			<div><small id="x_h_v">35%</small></div>
			<label>Temperatura (°C)
				<input id="x_t" type="range" min="0" max="45" value="28" style="width:100%"/>
			</label>
			<div><small id="x_t_v">28°C</small></div>
			<label>Lluvia (%)
				<input id="x_r" type="range" min="0" max="100" value="20" style="width:100%"/>
			</label>
			<div><small id="x_r_v">20%</small></div>
		</div>
		<div class="card" style="background:#fff;border:1px solid #e0e0e0;border-radius:12px;padding:1rem;">
			<h4 style="margin:0 0 0.5rem 0;">Importancia de indicadores (entrenamiento)</h4>
			<label>Importancia humedad (↓ humedad → regar)
				<input id="w_h" type="range" min="0" max="100" value="60" style="width:100%"/>
			</label>
			<label>Importancia temperatura (↑ temperatura → regar)
				<input id="w_t" type="range" min="0" max="100" value="50" style="width:100%"/>
			</label>
			<label>Importancia lluvia (↓ lluvia → regar)
				<input id="w_r" type="range" min="0" max="100" value="40" style="width:100%"/>
			</label>
		</div>
		<div class="card" style="background:#fff;border:1px solid #e0e0e0;border-radius:12px;padding:1rem;">
			<div style="display:flex;gap:0.5rem;flex-wrap:wrap;align-items:center;">
				<button id="train" class="btn" style="padding:0.5rem 0.8rem;border-radius:10px;border:1px solid #2e7d32;background:#2e7d32;color:#fff;cursor:pointer;">Entrenar 300 épocas</button>
				<button id="predict" class="btn btn--ghost" style="padding:0.5rem 0.8rem;border-radius:10px;border:1px solid #9e9e9e;background:#fff;cursor:pointer;">Predecir</button>
				<label style="display:inline-flex;align-items:center;gap:0.4rem;cursor:pointer;">
					<input id="fileJson" type="file" accept="application/json" style="display:none"/>
					<span class="btn btn--ghost" style="padding:0.5rem 0.8rem;border:1px solid #9e9e9e;border-radius:10px;background:#fff;">Cargar modelo (JSON)</span>
				</label>
				<button id="rtToggle" class="btn btn--ghost" style="padding:0.5rem 0.8rem;border-radius:10px;border:1px solid #9e9e9e;background:#fff;cursor:pointer;">Tiempo real: OFF</button>
			</div>
			<div style="margin-top:0.5rem;font-size:0.9rem;color:#333;">
				Formato esperado:
				<code>&#123;&quot;W1&quot;: [[...6x3...]], &quot;b1&quot;: [6], &quot;W2&quot;: [6], &quot;b2&quot;: 0.0&#125;</code>
			</div>
			<div style="margin-top:0.75rem;">
				<strong>Pérdida (MSE):</strong> <span id="loss">—</span>
			</div>
			<div style="margin-top:0.5rem;">
				<strong>Salida NN:</strong> <span id="yhat">—</span>
				<br/>
				<strong>Decisión:</strong> <span id="decision">—</span>
			</div>
		</div>
	</div>
	<div class="card" style="margin-top:1rem;background:#f8fbf9;border:1px solid #e0e0e0;border-radius:12px;padding:1rem;">
		<strong>Cómo leer el simulador:</strong>
		<ul>
			<li>La red aprende una regla sintética con la importancia que selecciones o usa un <em>modelo Python</em> cargado.</li>
			<li>Salida cercana a 1 → regar; cercana a 0 → no regar.</li>
			<li>El modo <em>Tiempo real</em> cicla datos “quemados” cada 5 minutos (simula sensores).</li>
		</ul>
	</div>
</section>
<script>
	function randn(){ return (Math.random()*2-1)*0.1; }
	function relu(x){ return Math.max(0,x); }
	function sigmoid(x){ return 1/(1+Math.exp(-x)); }
	function dsigmoid(y){ return y*(1-y); }

	let W1 = Array.from({length:6}, ()=> [randn(),randn(),randn()]);
	let b1 = Array.from({length:6}, ()=> randn());
	let W2 = Array.from({length:6}, ()=> randn());
	let b2 = randn();
	const lr = 0.01;

	// Datos “quemados” para ciclo de 5 min (muestras representativas)
	const samples = [
		{h:42, t:26, r:10}, {h:38, t:30, r:15}, {h:55, t:22, r:80}, {h:28, t:33, r:5},
		{h:47, t:27, r:40}, {h:35, t:29, r:20}, {h:60, t:24, r:70}, {h:32, t:31, r:12}
	];
	let sampleIdx = 0;
	let rtTimer = null;

	function setWeights(model){
		if(!model) return;
		if(model.W1 && model.b1 && model.W2 && (typeof model.b2 === 'number')){
			W1 = model.W1; b1 = model.b1; W2 = model.W2; b2 = model.b2;
		}
	}

	function forward(x){
		const z1 = W1.map((w,i)=> w[0]*x[0] + w[1]*x[1] + w[2]*x[2] + b1[i]);
		const h = z1.map(relu);
		const z2 = h.reduce((s,hi,i)=> s + hi*W2[i], b2);
		const y = sigmoid(z2);
		return {x,h,y};
	}

	function trainEpoch(data){
		let mse = 0;
		for(const {x,t} of data){
			const {h,y} = forward(x);
			const e = y - t;
			mse += e*e;
			const dz2 = e * dsigmoid(y);
			for(let i=0;i<6;i++) W2[i] -= lr * dz2 * h[i];
			b2 -= lr * dz2;
			for(let i=0;i<6;i++){
				const dh = dz2 * W2[i];
				const dz1 = h[i] > 0 ? dh : 0;
				W1[i][0] -= lr * dz1 * x[0];
				W1[i][1] -= lr * dz1 * x[1];
				W1[i][2] -= lr * dz1 * x[2];
				b1[i]      -= lr * dz1;
			}
		}
		return mse / data.length;
	}

	function makeDataset(n=500){
		const wh = Number(document.getElementById('w_h').value)/100;
		const wt = Number(document.getElementById('w_t').value)/100;
		const wr = Number(document.getElementById('w_r').value)/100;
		const data = [];
		for(let i=0;i<n;i++){
			const h = Math.random();
			const t = Math.random();
			const r = Math.random();
			const score = (1-h)*wh + t*wt + (1-r)*wr;
			const y = score > 0.6 ? 1 : 0;
			data.push({ x: [h,t,r], t: y });
		}
		return data;
	}

	const hIn = document.getElementById('x_h');
	const tIn = document.getElementById('x_t');
	const rIn = document.getElementById('x_r');
	const hv = document.getElementById('x_h_v');
	const tv = document.getElementById('x_t_v');
	const rv = document.getElementById('x_r_v');
	const lossEl = document.getElementById('loss');
	const yhatEl = document.getElementById('yhat');
	const decisionEl = document.getElementById('decision');
	const rtBtn = document.getElementById('rtToggle');

	[hIn,tIn,rIn].forEach(el=> el.addEventListener('input', ()=>{
		hv.textContent = hIn.value+'%';
		tv.textContent = tIn.value+'°C';
		rv.textContent = rIn.value+'%';
	}));

	document.getElementById('fileJson').addEventListener('change', async (ev)=>{
		const file = ev.target.files && ev.target.files[0];
		if(!file) return;
		const text = await file.text();
		try{ const m = JSON.parse(text); setWeights(m); lossEl.textContent = 'modelo cargado'; }catch(e){ lossEl.textContent = 'JSON inválido'; }
	});

	(async function tryLoadDefault(){
		try{ const res = await fetch('nn_model.json'); if(res.ok){ const m = await res.json(); setWeights(m); } }catch(e){}
	})();

	document.getElementById('train').addEventListener('click', ()=>{
		const data = makeDataset(600);
		let last = 0;
		for(let e=0;e<300;e++) last = trainEpoch(data);
		lossEl.textContent = last.toFixed(4);
	});

	document.getElementById('predict').addEventListener('click', ()=>{
		const x = [Number(hIn.value)/100, Number(tIn.value)/45, Number(rIn.value)/100];
		const {y} = forward(x);
		yhatEl.textContent = y.toFixed(3);
		decisionEl.textContent = y > 0.5 ? 'Regar (Activado)' : 'No regar (Descanso)';
		decisionEl.style.color = y > 0.5 ? '#2e7d32' : '#111';
	});

	function applySample(s){
		hIn.value = s.h; tIn.value = s.t; rIn.value = s.r;
		hv.textContent = s.h+'%'; tv.textContent = s.t+'°C'; rv.textContent = s.r+'%';
		const x = [s.h/100, s.t/45, s.r/100];
		const {y} = forward(x);
		yhatEl.textContent = y.toFixed(3);
		decisionEl.textContent = y > 0.5 ? 'Regar (Activado)' : 'No regar (Descanso)';
		decisionEl.style.color = y > 0.5 ? '#2e7d32' : '#111';
	}

	rtBtn.addEventListener('click', ()=>{
		if(rtTimer){
			clearInterval(rtTimer); rtTimer = null; rtBtn.textContent = 'Tiempo real: OFF';
			return;
		}
		// aplica de inmediato y cada 5 minutos (300000 ms)
		applySample(samples[sampleIdx % samples.length]); sampleIdx++;
		rtTimer = setInterval(()=>{
			applySample(samples[sampleIdx % samples.length]); sampleIdx++;
		}, 300000);
		rtBtn.textContent = 'Tiempo real: ON';
	});
</script>
---
